import { gql, request } from 'graphql-request';

const graphqlAPI = process.env.NEXT_PUBLIC_GRAPHCMS_ENDPOINT || '';

export const getPosts = async () => {
  const query = gql`
    query MyQuery {
      postsConnection {
        edges {
          node {
            createdAt
            excerpt
            id
            slug
            title
            featuredImage {
              url
            }
            author {
              bio
              id
              name
              photo {
                url
              }
            }
            categories {
              name
              slug
            }
            content {
              html
              json
              markdown
              raw
              text
            }
          }
        }
        pageInfo {
          startCursor
          endCursor
          pageSize
          hasNextPage
          hasPreviousPage
        }
      }
    }
  `;

  const result = await request(graphqlAPI, query);

  return result.postsConnection.edges;
};

export const getRecentPosts = async () => {
  const query = gql`
  query GetRecentPosts() {
    posts(orderBy: createdAt_DESC, first: 3) {
      title
      slug
      featuredImage {
        url
      }
      createdAt
    }
  }
  `;

  const result = await request(graphqlAPI, query);
  return result.posts;
};

export const getSimilarPosts = async () => {
  const query = gql`
    query MyQuery {
      posts(
        where: {
          slug_not: "$slug"
          AND: { categories_some: { slug_in: "$categories" } }
        }
        last: 3
      ) {
        title
        featuredImage {
          url
        }
        createdAt
        slug
      }
    }
  `;

  const result = await request(graphqlAPI, query);
  return result.posts;
};

export const getCategories = async () => {
  const query = gql`
    query MyQuery {
      categories {
        name
        slug
      }
    }
  `;

  const result = await request(graphqlAPI, query);
  return result.categories;
};

export const getPostDetails = async (slug: string) => {
  const query = gql`
    query GetPostDetails($slug: String!) {
      post(where: { slug: $slug }) {
        createdAt
        excerpt
        id
        slug
        title
        featuredImage {
          url
        }
        author {
          bio
          id
          name
          photo {
            url
          }
        }
        categories {
          name
          slug
        }
        content {
          html
          json
          markdown
          raw
          text
        }
      }
    }
  `;

  const result = await request(graphqlAPI, query, { slug });
  return result.post;
};

// Generated by https://quicktype.io

export interface Posts {
  node: PostData[];
}

export interface PostData {
  createdAt: Date;
  excerpt: string;
  id: string;
  slug: string;
  title: string;
  featuredImage: {
    url: string;
  };
  author: Author;
  categories: Category[];
  content: {
    html: any;
    json: any;
    markdown: any;
    raw: any;
    text: any;
  };
}

export interface Post {
  node: PostData;
}

export interface Author {
  bio: string;
  id: string;
  name: string;
  photo: {
    url: string;
  };
}

export interface Category {
  name: string;
  slug: string;
}
